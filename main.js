(()=>{"use strict";var e,r,t,n,o,i,a,d={70:(e,r,t)=>{const n=JSON.parse('[{"id":26,"title":"Побег из Шоушенка","imdb":9.3,"year":1994},{"id":25,"title":"Крёстный отец","imdb":9.2,"year":1972},{"id":27,"title":"Крёстный отец 2","imdb":9,"year":1974},{"id":1047,"title":"Тёмный рыцарь","imdb":9,"year":2008},{"id":223,"title":"Криминальное чтиво","imdb":8.9,"year":1994}]');class o{constructor(e){this.table=document.querySelector("table"),this.data=e}addRow(){const e=document.createElement("tr");return e.classList.add("table_item"),this.table.appendChild(e),e}static addCell(e,r){const t=document.createElement(r);return t.innerText=e,t.classList.add("table_item"),t}sortData(e){e.classList.contains("sorted-down")?(this.data=this.data.sort(((r,t)=>r[e.innerText]>t[e.innerText]?-1:1)),e.classList.remove("sorted-down"),e.classList.add("sorted-up")):(this.data=this.data.sort(((r,t)=>r[e.innerText]>t[e.innerText]?1:-1)),e.classList.add("sorted-down"),e.classList.remove("sorted-up")),this.removeTable(),this.loadData()}removeTable(){const e=this.table.querySelectorAll(".table_item");for(const r of e)r.remove()}loadData(){for(const e of this.data){const r=this.addRow(),t=o.addCell(e.id,"td");r.appendChild(t);const n=o.addCell(e.title,"td");r.appendChild(n);const i=`(${e.year})`,a=o.addCell(i,"td");r.appendChild(a);const d=`imdb: ${Number(e.imdb).toFixed(2)}`,c=o.addCell(d,"td");r.appendChild(c)}}listenToClick(){const e=document.querySelectorAll("th");for(const r of e)r.addEventListener("click",(()=>{this.sortData(r)}))}}const i=new o(n);i.loadData(),i.listenToClick(),t(891)},783:(e,r,t)=>{var n=t(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function d(){}function c(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),d;var t,u,f=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=f(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(c(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,r=arguments,n=function(){return t.apply(e,r)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},891:(e,r,t)=>{var n=t(783)(e.id,{esModule:!0,locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},c={};function s(e){var r=c[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var t=c[e]={id:e,exports:{}};try{var n={id:e,module:t,factory:d[e],require:s};s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require)}catch(e){throw t.error=e,e}return t.exports}s.m=d,s.c=c,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>{},s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"7938a22c45cf73c6ac76",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ahj_hw2_in_memory_sorting:",s.l=(t,n,o,i)=>{if(e[t])e[t].push(n);else{var a,d;if(void 0!==o)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==r+o){a=u;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+o),a.src=t),e[t]=[n];var f=(r,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),d&&document.head.appendChild(a)}},(()=>{var e,r,t,n={},o=s.c,i=[],a=[],d="idle",c=0,l=[];function u(e){d=e;for(var r=[],t=0;t<a.length;t++)r[t]=a[t].call(null,e);return Promise.all(r)}function f(){0==--c&&u("ready").then((function(){if(0===c){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(t){return t?u("prepare").then((function(){var n=[];return r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](t.c,t.r,t.m,e,r,n),e}),[])).then((function(){return r=function(){return e?m(e):u("ready").then((function(){return n}))},0===c?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):m(e)}function m(e){e=e||{},v();var n=r.map((function(r){return r(e)}));r=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var a,d=u("apply"),c=function(e){a||(a=e)},s=[];return n.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var t=0;t<r.length;t++)s.push(r[t])}})),Promise.all([i,d]).then((function(){return a?u("fail").then((function(){throw a})):t?m(e).then((function(e){return s.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):u("idle").then((function(){return s}))}))}function v(){if(t)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){t.forEach((function(t){s.hmrI[e](t,r)}))})),t=void 0,!0}s.hmrD=n,s.i.push((function(l){var m,v,y,g,b=l.module,w=function(r,t){var n=o[t];if(!n)return r;var a=function(a){if(n.hot.active){if(o[a]){var d=o[a].parents;-1===d.indexOf(t)&&d.push(t)}else i=[t],e=a;-1===n.children.indexOf(a)&&n.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+t),i=[];return r(a)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(a,l,s(l));return a.e=function(e){return function(e){switch(d){case"ready":u("prepare");case"prepare":return c++,e.then(f,f),e;default:return e}}(r.e(e))},a}(l.require,l.id);b.hot=(m=l.id,v=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=v.parents.slice(),e=y?void 0:m,s(m)},active:!0,accept:function(e,r,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=r||function(){},g._acceptedErrorHandlers[e[n]]=t;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return d;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:n[m]},e=void 0,g),b.parents=i,b.children=[],i=[],l.require=w})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var a=i&&("load"===i.type?"missing":i.type),d=i&&i.target&&i.target.href||r,c=new Error("Loading CSS chunk "+e+" failed.\n("+d+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=a,c.request=d,o.parentNode.removeChild(o),n(c)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(a=t[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,d,c,l,u)=>{l.push(a),e.forEach((e=>{var r=s.miniCssF(e),a=s.p+r,d=n(r,a);d&&c.push(new Promise(((r,n)=>{var c=t(e,a,(()=>{c.as="style",c.rel="preload",r()}),n);o.push(d),i.push(c)})))}))},(()=>{var e,r,t,n,o,i=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},a={};function d(r,t){return e=t,new Promise(((e,t)=>{a[r]=e;var n=s.p+s.hu(r),o=new Error;s.l(n,(e=>{if(a[r]){a[r]=void 0;var n=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+r+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,t(o)}}))}))}function c(e){function a(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,c=s.c[i];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<c.parents.length;l++){var u=c.parents[l],f=s.c[u];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(f.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),d(t[u],[i])):(delete t[u],r.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function d(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,r=void 0;var c={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var h,m=t[p],v=!1,y=!1,g=!1,b="";switch((h=m?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,d(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,p)&&(c[p]||(c[p]=[]),d(c[p],h.outdatedDependencies[p]));g&&(d(l,[h.moduleId]),u[p]=f)}t=void 0;for(var w,E=[],_=0;_<l.length;_++){var D=l[_],x=s.c[D];x&&(x.hot._selfAccepted||x.hot._main)&&u[D]!==f&&!x.hot._selfInvalidated&&E.push({module:D,require:x.hot._requireSelf,errorHandler:x.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var o=t.pop(),a=s.c[o];if(a){var d={},u=a.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,d);for(s.hmrD[o]=d,a.hot.active=!1,delete s.c[o],delete c[o],_=0;_<a.children.length;_++){var f=s.c[a.children[_]];f&&(e=f.parents.indexOf(o))>=0&&f.parents.splice(e,1)}}}for(var p in c)if(s.o(c,p)&&(a=s.c[p]))for(w=c[p],_=0;_<w.length;_++)r=w[_],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(r){for(var t in u)s.o(u,t)&&(s.m[t]=u[t]);for(var n=0;n<o.length;n++)o[n](s);for(var i in c)if(s.o(c,i)){var a=s.c[i];if(a){w=c[i];for(var d=[],f=[],p=[],h=0;h<w.length;h++){var m=w[h],v=a.hot._acceptedDependencies[m],y=a.hot._acceptedErrorHandlers[m];if(v){if(-1!==d.indexOf(v))continue;d.push(v),f.push(y),p.push(m)}}for(var g=0;g<d.length;g++)try{d[g].call(null,w)}catch(t){if("function"==typeof f[g])try{f[g](t,{moduleId:i,dependencyId:p[g]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:t}),e.ignoreErrored||r(t)}}}for(var b=0;b<E.length;b++){var _=E[b],D=_.module;try{_.require(D)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:D,module:s.c[D]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:D,error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:D,error:t}),e.ignoreErrored||r(t)}}return l}}}self.webpackHotUpdateahj_hw2_in_memory_sorting=(r,n,i)=>{for(var d in n)s.o(n,d)&&(t[d]=n[d],e&&e.push(d));i&&o.push(i),a[r]&&(a[r](),a[r]=void 0)},s.hmrI.jsonp=function(e,r){t||(t={},o=[],n=[],r.push(c)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(e,a,l,u,f,p){f.push(c),r={},n=a,t=l.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],e.forEach((function(e){s.o(i,e)&&void 0!==i[e]?(u.push(d(e,p)),r[e]=!0):r[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,t){r&&s.o(r,e)&&!r[e]&&(t.push(d(e)),r[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(70)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,